require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"imageFill":[function(require,module,exports){
var currentProject, showCredit;

currentProject = window.location.pathname.split("/")[window.location.pathname.split("/").length - 2];

if (Layer.prototype.imageFill === void 0) {
  Layer.prototype.imageFill = function(q) {
    var dwnldReq, dwnldRes, fillImages, imageNb, oReq, project, res;
    if (!q) {
      q = "";
    }
    if (localStorage.getItem("fillImages")) {
      fillImages = JSON.parse(localStorage.getItem("fillImages"));
      project = _.findIndex(fillImages.projects, {
        name: currentProject
      });
      if (project !== -1) {
        if (this.name !== "") {
          imageNb = _.findIndex(fillImages.projects[project].imageList, {
            name: this.name
          });
          if (imageNb !== -1) {
            this.image = fillImages.projects[project].imageList[imageNb].url;
            this.imageSaved = true;
          }
        }
      }
    }
    if (!this.imageSaved) {
      if (!this.name) {
        throw "A name for the layer you want to fill is required";
        return 0;
      }
      oReq = new XMLHttpRequest();
      res = "null";
      oReq.onload = function() {
        var buffer;
        buffer = oReq.response;
        return res = JSON.parse(buffer);
      };
      oReq.open("GET", "https://api.unsplash.com/photos/random?query=" + q + "&client_id=aff8cc7683bb0054396a790d5d0e942a93de3ae93ac83b8d13f6bf89a96b3ba8", false);
      oReq.send();
      if (res.errors) {
        throw "Search term didn't give any result";
        return 0;
      }
      showCredit(res, this, q);
      dwnldReq = new XMLHttpRequest();
      dwnldRes = "null";
      dwnldReq.onload = function() {
        var buffer;
        buffer = dwnldReq.response;
        return dwnldRes = JSON.parse(buffer);
      };
      dwnldReq.open("GET", res.links.download_location + "?client_id=aff8cc7683bb0054396a790d5d0e942a93de3ae93ac83b8d13f6bf89a96b3ba8", false);
      dwnldReq.send();
      if (dwnldRes.errors) {
        throw "Couldn't fetch photo";
        return 0;
      }
      return this.image = dwnldRes.url;
    }
  };
} else {
  throw "Method imageFill already exists";
}

showCredit = function(photo, layer, q) {
  var changeImage, credit, creditPhoto, creditUnsplash, keepImage;
  credit = new Layer({
    name: "credit",
    y: Align.bottom(-8),
    height: 30,
    borderRadius: 8,
    width: Screen.width - 20,
    x: Align.center,
    clip: true,
    opacity: 0,
    animOptions: {
      time: 0.3,
      delay: 0.2
    }
  });
  credit.states.on = {
    opacity: 1,
    animOptions: {
      time: 0.3
    }
  };
  credit.stateCycle();
  keepImage = new TextLayer({
    name: "keep",
    parent: credit,
    text: "✔︎",
    fontSize: 20,
    textAlign: "center",
    color: "#ffffff",
    backgroundColor: "#69C640",
    lineHeight: 1.55,
    width: 40,
    height: 30,
    x: Align.right,
    y: 0
  });
  keepImage.states.selected = {
    backgroundColor: "#2D561C",
    animOptions: {
      time: 0.1
    }
  };
  keepImage.on(Events.Tap, function() {
    var fillImages, newProject, projectNb;
    keepImage.stateCycle();
    fillImages = {
      projects: []
    };
    if (localStorage.getItem("fillImages")) {
      fillImages = JSON.parse(localStorage.getItem("fillImages"));
    }
    projectNb = _.findIndex(fillImages.projects, {
      name: currentProject
    });
    if (projectNb < 0) {
      projectNb = fillImages.projects.length;
      newProject = {
        name: currentProject,
        imageList: []
      };
      fillImages.projects.push(newProject);
    }
    fillImages.projects[projectNb].imageList.push({
      name: layer.name,
      url: photo.urls.regular
    });
    localStorage.setItem("fillImages", JSON.stringify(fillImages));
    credit.stateCycle();
    return credit.on(Events.StateSwitchEnd, function() {
      return credit.destroy();
    });
  });
  changeImage = new TextLayer({
    name: "change",
    parent: credit,
    text: "✘",
    fontSize: 20,
    textAlign: "center",
    color: "#ffffff",
    backgroundColor: "#D5373C",
    width: 40,
    height: 30,
    lineHeight: 1.55,
    x: Align.right(-40),
    y: 0
  });
  changeImage.states.selected = {
    backgroundColor: "#741E21",
    animOptions: {
      time: 0.1
    }
  };
  changeImage.on(Events.Tap, function() {
    changeImage.stateCycle();
    credit.stateCycle();
    return credit.on(Events.StateSwitchEnd, function() {
      credit.destroy();
      return layer.imageFill(q);
    });
  });
  creditUnsplash = new TextLayer({
    name: "Unsplash",
    parent: credit,
    fontSize: 10,
    color: "#000000",
    textDecoration: "underline",
    text: "Image from Unsplash",
    y: Align.center,
    x: 12
  });
  creditUnsplash.on(Events.Tap, function() {
    return window.open("https://unsplash.com/?utm_source=framerImageFill&utm_medium=referral&utm_campaign=api-credit", "_blank");
  });
  creditPhoto = new TextLayer({
    name: "Photographer",
    parent: credit,
    fontSize: 10,
    color: "#000000",
    textDecoration: "underline",
    text: "Photo by " + photo.user.username,
    truncate: true,
    height: 13,
    width: credit.width - 210,
    y: Align.center,
    x: 122
  });
  return creditPhoto.on(Events.Tap, function() {
    return window.open("https://unsplash.com/@" + photo.user.username + "?utm_source=framerImageFill&utm_medium=referral&utm_campaign=api-credit", "_blank");
  });
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
